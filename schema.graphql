input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CreateNoteInput {
  text: String!
}

scalar DateTime

input DeleteNoteInput {
  id: ID!
}

input EditNoteInput {
  id: ID!
  text: String!
}

input EditUserInput {
  name: String
}

input ForgotPasswordInput {
  email: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(input: ChangePasswordInput!): Result!
  createNote(input: CreateNoteInput!): Note!
  deleteNote(input: DeleteNoteInput!): Note!
  editNote(input: EditNoteInput!): Note!
  editUser(input: EditUserInput!): User!
  forgotPassword(input: ForgotPasswordInput!): Result!
  login(input: LoginInput!): User!
  logout: Result!
  resetPassword(input: ResetPasswordInput!): Result!
  signUp(input: SignUpInput!): User!
  verifyEmail(input: VerifyEmailInput!): Result!
}

interface Node {
  id: ID!
}

type Note implements Node {
  createdAt: DateTime!
  id: ID!
  text: String!
  user: User!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  me: User
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  note(id: ID!): Note!
  notes(after: String, before: String, first: Int, last: Int): QueryNotesConnection!
}

type QueryNotesConnection {
  edges: [QueryNotesConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryNotesConnectionEdge {
  cursor: String!
  node: Note!
}

input ResetPasswordInput {
  code: String!
  newPassword: String!
}

enum Result {
  SUCCESS
}

input SignUpInput {
  email: String!
  name: String!
  password: String!
}

type User {
  email: String
  emailVerified: Boolean!
  id: ID!
  name: String!
  notes(after: String, before: String, first: Int, last: Int): UserNotesConnection!
}

type UserNotesConnection {
  edges: [UserNotesConnectionEdge]!
  pageInfo: PageInfo!
}

type UserNotesConnectionEdge {
  cursor: String!
  node: Note!
}

input VerifyEmailInput {
  code: String!
}
